const BaseBot = require('node-telegram-bot-api');

const debtRegexp  = /(-?\d+)(.+)?/;
const digitsLimit = 9;

class Bot extends BaseBot {
    constructor(token, url, port) {
        super(token, { webHook: { port: port } });

        this.token = token;
        this.url = url;

        this.name;
        this.dataBase;
        this.cipher;

        this.articleID = 0;
    }

    start() {
        this.onText(/\/start/, this.onStart);
        this.onText(/\/help/, this.onHelp);
        this.onText(/\/share/, this.onShare);
        this.onText(/\/stats/, this.onStats);
        this.onText(debtRegexp, this.onDebt);

        this.on('inline_query', this.onInline);
        this.on('callback_query', this.onButton);

        this.setWebHook(`${this.url}/bot${this.token}`);
    }

    get articleID() { return this.articleID++; }
    set articleID(articleID) { this.articleID = articleID; }

    async onStart(msg) {
        try {
            await this.sendMessage(msg.chat.id, startText());
        } catch (error) {
            console.log(error);
        }
    }

    async onHelp(msg) {
        try {
            await this.sendMessage(msg.chat.id, helpText(this.name));
        } catch (error) {
            console.log(error);
        }
    }

    async onShare(msg) {
        try {
            await this.sendMessage(msg.chat.id, shareText(this.name), shareKeyboard);
        } catch (error) {
            console.log(error);
        }
    }

    async inlineShare(query) {
        try {
            await this.answerInlineQuery(query.id, [{
                type: 'article',
                id: this.articleID,
                title: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è ü§ñ',
                input_message_content: {
                    message_text: shareText(this.name)
                }
            }]);
        } catch (error) {
            console.log(error);
        }
    }

    async onStats(msg) {
        try {
            let stats = await this.dataBase.getStats(msg.from.username);
            await this.sendMessage(msg.chat.id, statsText(stats), statsKeyboard);
        } catch(error) {
            console.log(error);
        }
    }

    async updateStats(query) {
        try {
            let stats = await this.dataBase.getStats(query.from.username);
            await Promise.all([
                this.deleteMessage(query.message.chat.id, query.message.message_id),
                this.answerCallbackQuery(query.id, { text: '–û–±–Ω–æ–≤–ª–µ–Ω–æ.' }),
                this.sendMessage(query.message.chat.id, statsText(stats), statsKeyboard)
            ]);
        } catch(error) {
            console.log(error);
        }
    }

    async onDebt(msg, match) {
        try {
            if (match[1].length < digitsLimit) {
                await this.sendMessage(msg.chat.id, debtText(match[2], Number(match[1]), msg.from.username), {
                    reply_markup: JSON.stringify({
                        inline_keyboard: [[{
                            text: offerButton(match[1][0]),
                            switch_inline_query: match[1]
                                + (match[2] || '')
                        }]]
                    })
                });
                console.log('\namount :', match[1]);
            } else {
                await this.sendMessage(msg.chat.id, `‚ùå –†–∞–∑–º–µ—Ä –¥–æ–ª–≥–∞ –Ω–µ—Ä–µ–∞–ª—å–Ω–æ –±–æ–ª—å—à–æ–π ‚ùå`);
            }
        } catch (error) {
            console.log(error);
        }
    }

    async inlineDebt(query) {
        let match = query.query.match(debtRegexp);
        if (match[1].length >= digitsLimit) {
            await emptyInline();
            return;
        }
        let offer = {
            from: query.from.username,
            amount: Number(match[1])
        };
        let answer_main = debtArticle(offer, match);
        offer.amount = -offer.amount;
        let answer_addend = debtArticle(offer, match);
        try {
            await this.answerInlineQuery(query.id, [
                answer_main,
                answer_addend
            ], { cache_time: 0 });
        } catch (error) {
            console.log(error);
        }
    }

    debtArticle(offer, match) {
        return {
            type: 'article',
            id: this.articleID,
            title: debtTitle(offer.amount),
            input_message_content: {
                message_text: debtText(match[2], offer.amount, offer.from)
            },
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: '–û–∫ üåù',
                        callback_data: this.cipher.encode(offer, true)
                    },
                    {
                        text: '–ù–µ üåö',
                        callback_data: this.cipher.encode(offer, false)
                    }
                ]]
            }
        };
    }

    async onOfferClick(query) {
        let offer = this.cipher.decode(query.data);
        offer.to = query.from.username;
        try {
            if (offer.to == offer.from) {
                if (offer.accept) {
                    await this.answerCallbackQuery(query.id, { text: `–ù–µ–ª—å–∑—è –¥–æ–ª–∂–∞—Ç—å —Å–µ–±–µ` });
                } else {
                    await this.editMessageText(`–û—Ç–º–µ–Ω–µ–Ω–æ @${offer.from}`, { inline_message_id: query.inline_message_id });
                }
            } else {
                await this.editMessageText(closedDealMsg(offer), { inline_message_id: query.inline_message_id });
                if (offer.accept)
                    await this.dataBase.saveDebt(offer);
            }
        } catch (error) {
            console.log(error);
        }
    }

    async onInline(query) {
        if (debtRegexp.test(query.query))
            await this.inlineDebt(query);
        else if (query.query == 'share' || query.query == '')
            await this.inlineShare(query);
        else
            await this.emptyInline(query);
    }

    async emptyInline(query) {
        try {
            await this.answerInlineQuery(query.id, []);
        } catch (error) {
            console.log(error);
        }
    }

    async onButton(query) {
        if (query.data == 'update')
            await this.updateStats(query);
        else
            await this.onOfferClick(query);
    }
};

const UI = {
    start: {
        text: function() {
            return `–ü—Ä–∏–≤–µ—Ç! üëã\n`
                + `–Ø ‚Äî –∑–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞ –¥–æ–ª–≥–æ–≤.\n\n`
                + `üí∞ –ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ—Å–∏—Ç—å –≤ –¥–æ–ª–≥, –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É.\n\n`
                + `üóÑ –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ–ª–≥–∏, –Ω–∞–ø–∏—à–∏ /stats.\n\n`
                + `üëã –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è –µ—â—ë —Ä–∞–∑, –Ω–∞–ø–∏—à–∏ /start.\n\n`
                + `‚ùì –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ, –Ω–∞–ø–∏—à–∏ /help.`;
        }
    },
    help: {
        text: function(name) {
            return ''
                + `–ö–æ–º–∞–Ω–¥—ã ([—Ç–µ–∫—Å—Ç] ‚Äî –ø–æ –≤–∫—É—Å—É):\n\n`
                + ` N [—Ç–µ–∫—Å—Ç] ‚Äî –ø–æ–ø—Ä–æ—Å–∏—Ç—å N üí∞.\n`
                + `-N [—Ç–µ–∫—Å—Ç] ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å N üí∞.\n`
                + `/stats ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ–ª–≥–∏.\n`
                + `/share ‚Äî –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º ü§ñ.\n`
                + `/start ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞.\n`
                + `/help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n`
                + `–ò–Ω–ª–∞–π–Ω (@${name} + –∫–æ–º–∞–Ω–¥–∞):\n\n`
                + `–ø—É—Å—Ç–æ ‚Äî –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º ü§ñ.\n`
                + ` N [—Ç–µ–∫—Å—Ç] ‚Äî –ø–æ–ø—Ä–æ—Å–∏—Ç—å üí∞.\n`
                + `-N [—Ç–µ–∫—Å—Ç] ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å üí∞.`;
        }
    },
    share: {
        text: function(name) {
            return ''
                + `–ü—Ä–∏–≤–µ—Ç! üëã\n`
                + `–Ø ‚Äî –î–æ–ª–≥–µ—Ä (@${name}), –∑–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞ –¥–æ–ª–≥–æ–≤.\n`
                + `–ï—â—ë —É–≤–∏–¥–∏–º—Å—è?`;
        },
        keyboard: {
            reply_markup: JSON.stringify({
                inline_keyboard: [[{
                    text: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è ü§ñ',
                    switch_inline_query: ''
                }]]
            })
        }
    },
    stats: {
        text: function(table) {
            if (!table.length)
                return '–î–æ–ª–≥–æ–≤ –Ω–µ—Ç üëè';
        
            let debts = table.filter(debt => debt.amount > 0),
                owes  = table.filter(debt => debt.amount < 0).map(lineAbs);
        
            return ''
                + lineReduce(debts, '–í—ã –¥–æ–ª–∂–Ω—ã:\n')
                + (debts.length && owes.length ? '\n\n' : '')
                + lineReduce(owes, '–í–∞–º –¥–æ–ª–∂–Ω—ã:\n');
        },
        keyboard: {
            reply_markup: JSON.stringify({
                inline_keyboard: [[{
                    text: '–û–±–Ω–æ–≤–∏—Ç—å üîÑ',
                    callback_data: 'update'
                }]]
            })
        }
    },
    debt: {
        text: function(text, amount, to) {
            if (text && (text.length > 1)) {
                return text.substr(1)
                    + `\n\n`
                    + `‚ÄºÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${amount} ‚ÄºÔ∏è`;
            } else {
                return `–Ø ${amount > 0 ? '—Ö–æ—á—É' : '–¥–∞—é'}`
                    + ` ${Math.abs(amount)} (${to})`;
            }
        }
    }
};

function startText() {
    return `–ü—Ä–∏–≤–µ—Ç! üëã\n`
        + `–Ø ‚Äî –∑–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞ –¥–æ–ª–≥–æ–≤.\n\n`
        + `üí∞ –ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ—Å–∏—Ç—å –≤ –¥–æ–ª–≥, –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É.\n\n`
        + `üóÑ –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ–ª–≥–∏, –Ω–∞–ø–∏—à–∏ /stats.\n\n`
        + `üëã –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è –µ—â—ë —Ä–∞–∑, –Ω–∞–ø–∏—à–∏ /start.\n\n`
        + `‚ùì –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ, –Ω–∞–ø–∏—à–∏ /help.`;
};

function helpText(name) {
    return ''
        + `–ö–æ–º–∞–Ω–¥—ã ([—Ç–µ–∫—Å—Ç] ‚Äî –ø–æ –≤–∫—É—Å—É):\n\n`
        + ` N [—Ç–µ–∫—Å—Ç] ‚Äî –ø–æ–ø—Ä–æ—Å–∏—Ç—å N üí∞.\n`
        + `-N [—Ç–µ–∫—Å—Ç] ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å N üí∞.\n`
        + `/stats ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ–ª–≥–∏.\n`
        + `/share ‚Äî –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º ü§ñ.\n`
        + `/start ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞.\n`
        + `/help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n`
        + `–ò–Ω–ª–∞–π–Ω (@${name} + –∫–æ–º–∞–Ω–¥–∞):\n\n`
        + `–ø—É—Å—Ç–æ ‚Äî –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º ü§ñ.\n`
        + ` N [—Ç–µ–∫—Å—Ç] ‚Äî –ø–æ–ø—Ä–æ—Å–∏—Ç—å üí∞.\n`
        + `-N [—Ç–µ–∫—Å—Ç] ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å üí∞.`;
};

function shareText(name) {
    return ''
        + `–ü—Ä–∏–≤–µ—Ç! üëã\n`
        + `–Ø ‚Äî –î–æ–ª–≥–µ—Ä (@${name}), –∑–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞ –¥–æ–ª–≥–æ–≤.\n`
        + `–ï—â—ë —É–≤–∏–¥–∏–º—Å—è?`;
};

const shareKeyboard = {
    reply_markup: JSON.stringify({
        inline_keyboard: [[{
            text: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è ü§ñ',
            switch_inline_query: ''
        }]]
    })
};

function lineReduce(table, seed) {
    console.log(table, seed);
    if (!table.length)
        return '';
    return table.reduce((res, line) => {
        return res
            + `\n@${line.to_name}: ${line.amount}`;
    }, seed);
};

function lineAbs(line) {
    return {
        to_name: line.to_name,
        amount: Math.abs(line.amount)
    };
};

function statsText(table) {
    if (!table.length)
        return '–î–æ–ª–≥–æ–≤ –Ω–µ—Ç üëè';

    let debts = table.filter(debt => debt.amount > 0),
        owes  = table.filter(debt => debt.amount < 0).map(lineAbs);

    return ''
        + lineReduce(debts, '–í—ã –¥–æ–ª–∂–Ω—ã:\n')
        + (debts.length && owes.length ? '\n\n' : '')
        + lineReduce(owes, '–í–∞–º –¥–æ–ª–∂–Ω—ã:\n');
};

const statsKeyboard = {
    reply_markup: JSON.stringify({
        inline_keyboard: [[{
            text: '–û–±–Ω–æ–≤–∏—Ç—å üîÑ',
            callback_data: 'update'
        }]]
    })
};

function closedDealMsg(offer) {
    let from   = offer.from,
        amount = offer.amount,
        to     = offer.to,
        accept = offer.accept;
    let arg1 = amount > 0 ? `–¥–æ–ª–≥–∞ (–∫–æ–ª-–≤–æ: ${amount})` : -amount,
        arg2 = accept ? `–ø—Ä–∏–Ω—è—Ç–æ` : `–æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–æ`;
    return `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ${arg1} –±—ã–ª–æ ${arg2} @${to}. (${from})`;
};

function debtText(text, amount, to) {
    if (text && (text.length > 1)) {
        return text.substr(1)
            + `\n\n`
            + `‚ÄºÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${amount} ‚ÄºÔ∏è`;
    } else {
        return `–Ø ${amount > 0 ? '—Ö–æ—á—É' : '–¥–∞—é'}`
            + ` ${Math.abs(amount)} (${to})`;
    }
};

function offerButton(minus) {
    return (minus == '-' ? '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å' : '–ü–æ–ø—Ä–æ—Å–∏—Ç—å') + ' üí∞';
};

function debtTitle(amount) {
    return `${amount > 0 ? `–ü–æ–ø—Ä–æ—Å–∏—Ç—å` : `–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å`} ${Math.abs(amount)}`;
};

if (module) module.exports = Bot;
