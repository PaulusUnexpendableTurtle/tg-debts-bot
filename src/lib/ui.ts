import { StatsRow, Offer, OfferTemplate } from './common_types';
import util from './util';

import Bot from 'node-telegram-bot-api';

const ok_sign = '‚úÖ';
const no_sign = '‚ùå';
const money = '‚ÇΩ';

function sign(ok: boolean) {
    return ok ? ok_sign : no_sign;
}

const UI = {
    start: {
        text() {
            return `–ü—Ä–∏–≤–µ—Ç! üëã\n`
                + `–Ø ‚Äî –∑–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞ –¥–æ–ª–≥–æ–≤.\n\n`
                + `üí∞ –ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ—Å–∏—Ç—å –≤ –¥–æ–ª–≥, –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É.\n\n`
                + `üóÑ –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ–ª–≥–∏, –Ω–∞–ø–∏—à–∏ /stats.\n\n`
                + `üëã –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è –µ—â—ë —Ä–∞–∑, –Ω–∞–ø–∏—à–∏ /start.\n\n`
                + `‚ùì –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ, –Ω–∞–ø–∏—à–∏ /help.`;
        }
    },
    help: {
        text(name: string) {
            return ''
                + `–ö–æ–º–∞–Ω–¥—ã ([—Ç–µ–∫—Å—Ç] ‚Äî –ø–æ –≤–∫—É—Å—É):\n\n`
                + ` N [—Ç–µ–∫—Å—Ç] ‚Äî —Ç—ã –ø–æ–ª—É—á–∏–ª N üí∞.\n`
                + `-N [—Ç–µ–∫—Å—Ç] ‚Äî —Ç—ã –æ—Ç–¥–∞–ª N üí∞.\n`
                + `/stats ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ–ª–≥–∏.\n`
                + `/share ‚Äî –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º.\n`
                + `/start ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞.\n`
                + `/help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n`
                + `–ò–Ω–ª–∞–π–Ω (@${name} + –∫–æ–º–∞–Ω–¥–∞):\n\n`
                + `–ø—É—Å—Ç–æ ‚Äî –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º.\n`
                + ` N [—Ç–µ–∫—Å—Ç] ‚Äî —Ç—ã –ø–æ–ª—É—á–∏–ª üí∞.\n`
                + `-N [—Ç–µ–∫—Å—Ç] ‚Äî —Ç—ã –æ—Ç–¥–∞–ª üí∞.`;
        }
    },
    share: {
        text(name: string) {
            return ''
                + `–ü—Ä–∏–≤–µ—Ç! üëã\n`
                + `–Ø ‚Äî –î–æ–ª–≥–µ—Ä (@${name}), –∑–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞ –¥–æ–ª–≥–æ–≤.\n`
                + `–ï—â—ë —É–≤–∏–¥–∏–º—Å—è?`;
        },
        keyboard(): Bot.SendMessageOptions {
            return {
                reply_markup: {
                    inline_keyboard: [[{
                        text: 'ü§ñ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º',
                        switch_inline_query: ''
                    }]]
                }
            };
        }, 
        article: {
            title() {
                return '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è ü§ñ';
            }
        }
    },
    stats: {
        text(table: StatsRow[]) {
            if (!table.length)
                return 'üëè –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –¥–æ–ª–≥–æ–≤ –Ω–µ—Ç!';
            let debts = table.filter(debt => debt.amount > 0);
            let owes = table.filter(debt => debt.amount < 0).map(util.lineAbs);
            return ''
                + util.lineReduce(debts, '–í—ã –¥–æ–ª–∂–Ω—ã:\n')
                + (debts.length && owes.length ? '\n\n' : '')
                + util.lineReduce(owes, '–í–∞–º –¥–æ–ª–∂–Ω—ã:\n');
        },
        callback_answer_text() {
            return 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ';
        },
        keyboard(): Bot.SendMessageOptions {
            return {
                reply_markup: {
                    inline_keyboard: [[{
                        text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
                        callback_data: 'update'
                    }]]
                }
            };
        }
    },
    debt: {
        info(amount: number, hide?: boolean) {
            let action = amount > 0 ? '–≤–∑—è–ª –≤ –¥–æ–ª–≥' : '–æ—Ç–¥–∞–ª';
            let object = hide ? 'üí∞' : (`${Math.abs(amount)} ${money}`);
            return `–Ø ${action} ${object}`;
        },
        text(text: string, amount: number) {
            if (text && (text.length > 1)) {
                return '' 
                    + `*${UI.debt.info(amount)}*`
                    + `\n`
                    + text.substr(1);
            } else {
                return UI.debt.info(amount) + '.';
            }
        },
        keyboard(
            text: string,
            amount: number
        ): Bot.SendMessageOptions {
            return {
                reply_markup: {
                    inline_keyboard: [[{
                        text: UI.debt.info(amount, true),
                        switch_inline_query: `${amount}${text || ''}`
                    }]]
                }
            };
        },
        amount_overflow_text: function(): string {
            return `${no_sign} –î–æ–ª–≥ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.`;
        },
        article: {
            title: function(amount: number): string {
                return `${amount > 0 ? '–í–∑—è—Ç—å –≤ –¥–æ–ª–≥' : '–û—Ç–¥–∞—Ç—å'} ${Math.abs(amount)} ${money}`;
            },
            keyboard: function(): Bot.InlineKeyboardMarkup {
                return {
                    inline_keyboard: [[
                        { text: 'üåù –û–∫', callback_data: '1' },
                        { text: 'üåö –ù–µ', callback_data: '0' }
                    ]]
                };
            }
        }
    },
    deal: {
        text: function(offer: Offer): string {
            let person = offer.amount > 0 ? offer.from : offer.to;
            let neg = offer.accept ? '' : '–Ω–µ';
            return `${sign(offer.accept)} @${person} ${neg} –ø–æ–ª—É—á–∏–ª ${Math.abs(offer.amount)} ${money}.`;
        },
        self_accept_text: function(): string {
            return `${no_sign} –ù–µ–ª—å–∑—è –¥–æ–ª–∂–∞—Ç—å —Å–µ–±–µ`;
        },
        cancel_text: function(): string {
            return `${no_sign} –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.`;
        },
        expire_text: function(offer: OfferTemplate): string {
            return `${no_sign} –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–µ–∫–ª–æ.`;
        }
    }
};

export default UI;
